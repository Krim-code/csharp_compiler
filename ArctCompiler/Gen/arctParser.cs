//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Redmi/Documents/Programming/C#/CourseCompiler/ArctCompiler\arct.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class arctParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, IF=5, WHILE=6, RETURN=7, FUNC=8, COUT=9, 
		DOUBLE=10, INTEGER=11, STRING=12, NUMBER=13, CONTIN=14, BREAK=15, CONST=16, 
		ELSE=17, AND=18, OR=19, COMMA=20, EQ=21, ENDPOINT=22, LBRACE=23, RBRACE=24, 
		LRBRACKET=25, RRBRACKET=26, COMMENT=27, WS=28, BLOCKCOMMENT=29, EQQ=30, 
		NEG=31, BIGGER=32, EQBIGGER=33, LESS=34, EQLESS=35, PLUS=36, MINUS=37, 
		MULT=38, DIV=39, MOD=40;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_block = 2, RULE_constant = 3, RULE_variable = 4, 
		RULE_function = 5, RULE_type = 6, RULE_parameter = 7, RULE_statement = 8, 
		RULE_callFunction = 9, RULE_assignmentStatement = 10, RULE_coutStatement = 11, 
		RULE_expressionUnion = 12, RULE_ifStatement = 13, RULE_whileStatement = 14, 
		RULE_returnStatement = 15, RULE_continueStatement = 16, RULE_condition = 17, 
		RULE_conditionUnion = 18, RULE_expression = 19, RULE_factor = 20, RULE_identifier = 21, 
		RULE_operations = 22, RULE_plusminus = 23, RULE_multdivmod = 24;
	public static readonly string[] ruleNames = {
		"program", "main", "block", "constant", "variable", "function", "type", 
		"parameter", "statement", "callFunction", "assignmentStatement", "coutStatement", 
		"expressionUnion", "ifStatement", "whileStatement", "returnStatement", 
		"continueStatement", "condition", "conditionUnion", "expression", "factor", 
		"identifier", "operations", "plusminus", "multdivmod"
	};

	private static readonly string[] _LiteralNames = {
		null, "'main()'", "'int'", "'double'", "'\"'", "'if'", "'while'", "'return'", 
		"'func'", "'cout'", null, null, null, null, "'continue'", "'break'", "'const'", 
		"'else'", "'and'", "'or'", "','", "'='", "';'", "'{'", "'}'", "'('", "')'", 
		null, null, null, "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'+'", 
		"'-'", "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "IF", "WHILE", "RETURN", "FUNC", "COUT", 
		"DOUBLE", "INTEGER", "STRING", "NUMBER", "CONTIN", "BREAK", "CONST", "ELSE", 
		"AND", "OR", "COMMA", "EQ", "ENDPOINT", "LBRACE", "RBRACE", "LRBRACKET", 
		"RRBRACKET", "COMMENT", "WS", "BLOCKCOMMENT", "EQQ", "NEG", "BIGGER", 
		"EQBIGGER", "LESS", "EQLESS", "PLUS", "MINUS", "MULT", "DIV", "MOD"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "arct.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static arctParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public arctParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public arctParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONST) {
				{
				State = 50;
				constant();
				}
			}

			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FUNC) {
				{
				State = 53;
				function();
				}
			}

			State = 56;
			main();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			type();
			State = 59;
			Match(T__0);
			State = 60;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(arctParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(arctParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(LBRACE);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17213513452L) != 0)) {
				{
				{
				State = 63;
				statement();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONST() { return GetTokens(arctParser.CONST); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST(int i) {
			return GetToken(arctParser.CONST, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENDPOINT() { return GetTokens(arctParser.ENDPOINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT(int i) {
			return GetToken(arctParser.ENDPOINT, i);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 6, RULE_constant);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(CONST);
			State = 72;
			variable();
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 73;
					Match(ENDPOINT);
					State = 74;
					Match(CONST);
					State = 75;
					variable();
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 81;
			Match(ENDPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(arctParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 8, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			type();
			State = 84;
			identifier();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 85;
				Match(EQ);
				State = 86;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(arctParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRBRACKET() { return GetToken(arctParser.LRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter() {
			return GetRuleContext<ParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRBRACKET() { return GetToken(arctParser.RRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(FUNC);
			State = 90;
			type();
			State = 91;
			identifier();
			State = 92;
			Match(LRBRACKET);
			State = 93;
			parameter();
			State = 94;
			Match(RRBRACKET);
			State = 95;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = TokenStream.LA(1);
			if ( !(_la==T__1 || _la==T__2) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(arctParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(arctParser.COMMA, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==T__2) {
				{
				State = 99;
				variable();
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 100;
					Match(COMMA);
					State = 101;
					variable();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CoutStatementContext coutStatement() {
			return GetRuleContext<CoutStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(arctParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				assignmentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				coutStatement();
				State = 111;
				Match(ENDPOINT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				continueStatement();
				State = 116;
				Match(ENDPOINT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 118;
				expression(0);
				State = 119;
				Match(ENDPOINT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 121;
				callFunction();
				State = 122;
				Match(ENDPOINT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 124;
				constant();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 125;
				variable();
				State = 126;
				Match(ENDPOINT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 128;
				returnStatement();
				State = 129;
				Match(ENDPOINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRBRACKET() { return GetToken(arctParser.LRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionUnionContext expressionUnion() {
			return GetRuleContext<ExpressionUnionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRBRACKET() { return GetToken(arctParser.RRBRACKET, 0); }
		public CallFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterCallFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitCallFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallFunctionContext callFunction() {
		CallFunctionContext _localctx = new CallFunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_callFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			identifier();
			State = 134;
			Match(LRBRACKET);
			State = 135;
			expressionUnion();
			State = 136;
			Match(RRBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(arctParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			identifier();
			State = 139;
			Match(EQ);
			State = 140;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoutStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUT() { return GetToken(arctParser.COUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRBRACKET() { return GetToken(arctParser.LRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRBRACKET() { return GetToken(arctParser.RRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionUnionContext expressionUnion() {
			return GetRuleContext<ExpressionUnionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(arctParser.STRING, 0); }
		public CoutStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coutStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterCoutStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitCoutStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoutStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoutStatementContext coutStatement() {
		CoutStatementContext _localctx = new CoutStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_coutStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(COUT);
			State = 143;
			Match(LRBRACKET);
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE:
			case INTEGER:
			case STRING:
			case LRBRACKET:
			case RRBRACKET:
			case LESS:
				{
				State = 144;
				expressionUnion();
				}
				break;
			case T__3:
				{
				State = 145;
				Match(T__3);
				State = 146;
				Match(STRING);
				State = 147;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 150;
			Match(RRBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionUnionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(arctParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(arctParser.COMMA, i);
		}
		public ExpressionUnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionUnion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionUnionContext expressionUnion() {
		ExpressionUnionContext _localctx = new ExpressionUnionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expressionUnion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17213430784L) != 0)) {
				{
				State = 152;
				expression(0);
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 153;
					Match(COMMA);
					State = 154;
					expression(0);
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(arctParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRBRACKET() { return GetToken(arctParser.LRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionUnionContext conditionUnion() {
			return GetRuleContext<ConditionUnionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRBRACKET() { return GetToken(arctParser.RRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(arctParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(IF);
			State = 163;
			Match(LRBRACKET);
			State = 164;
			conditionUnion();
			State = 165;
			Match(RRBRACKET);
			State = 166;
			block();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 167;
				Match(ELSE);
				State = 168;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(arctParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRBRACKET() { return GetToken(arctParser.LRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionUnionContext conditionUnion() {
			return GetRuleContext<ConditionUnionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRBRACKET() { return GetToken(arctParser.RRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(WHILE);
			State = 172;
			Match(LRBRACKET);
			State = 173;
			conditionUnion();
			State = 174;
			Match(RRBRACKET);
			State = 175;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(arctParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(RETURN);
			State = 178;
			factor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTIN() { return GetToken(arctParser.CONTIN, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(CONTIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperationsContext operations() {
			return GetRuleContext<OperationsContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 34, RULE_condition);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				callFunction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184;
				expression(0);
				State = 185;
				operations();
				State = 186;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionUnionContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(arctParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(arctParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(arctParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(arctParser.OR, i);
		}
		public ConditionUnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionUnion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterConditionUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitConditionUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionUnionContext conditionUnion() {
		ConditionUnionContext _localctx = new ConditionUnionContext(Context, State);
		EnterRule(_localctx, 36, RULE_conditionUnion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			condition();
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND || _la==OR) {
				{
				{
				State = 191;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AND || _la==OR) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 192;
				condition();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAddContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlusminusContext plusminus() {
			return GetRuleContext<PlusminusContext>(0);
		}
		public ExpressionAddContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionConvertContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(arctParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGGER() { return GetToken(arctParser.BIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionConvertContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionConvert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionConvert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionConvert(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFactorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ExpressionFactorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFactor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMulContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultdivmodContext multdivmod() {
			return GetRuleContext<MultdivmodContext>(0);
		}
		public ExpressionMulContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLE:
			case INTEGER:
			case STRING:
			case LRBRACKET:
				{
				_localctx = new ExpressionFactorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 199;
				factor();
				}
				break;
			case LESS:
				{
				_localctx = new ExpressionConvertContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200;
				Match(LESS);
				State = 201;
				type();
				State = 202;
				Match(BIGGER);
				State = 203;
				expression(1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 217;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 215;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new ExpressionAddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 207;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 208;
						plusminus();
						State = 209;
						expression(4);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionMulContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 211;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 212;
						multdivmod();
						State = 213;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 219;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(arctParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(arctParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LRBRACKET() { return GetToken(arctParser.LRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RRBRACKET() { return GetToken(arctParser.RRBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallFunctionContext callFunction() {
			return GetRuleContext<CallFunctionContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 40, RULE_factor);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				Match(INTEGER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 222;
				Match(DOUBLE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223;
				Match(LRBRACKET);
				State = 224;
				factor();
				State = 225;
				Match(RRBRACKET);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227;
				assignmentStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 228;
				callFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(arctParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(arctParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(arctParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(arctParser.NUMBER, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(STRING);
			State = 235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 232;
					_la = TokenStream.LA(1);
					if ( !(_la==STRING || _la==NUMBER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQQ() { return GetToken(arctParser.EQQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEG() { return GetToken(arctParser.NEG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGGER() { return GetToken(arctParser.BIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQBIGGER() { return GetToken(arctParser.EQBIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(arctParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQLESS() { return GetToken(arctParser.EQLESS, 0); }
		public OperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitOperations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationsContext operations() {
		OperationsContext _localctx = new OperationsContext(Context, State);
		EnterRule(_localctx, 44, RULE_operations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67645734912L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusminusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(arctParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(arctParser.MINUS, 0); }
		public PlusminusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusminus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterPlusminus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitPlusminus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusminus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusminusContext plusminus() {
		PlusminusContext _localctx = new PlusminusContext(Context, State);
		EnterRule(_localctx, 46, RULE_plusminus);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultdivmodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(arctParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(arctParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(arctParser.MOD, 0); }
		public MultdivmodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multdivmod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterMultdivmod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitMultdivmod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultdivmod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultdivmodContext multdivmod() {
		MultdivmodContext _localctx = new MultdivmodContext(Context, State);
		EnterRule(_localctx, 48, RULE_multdivmod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1924145348608L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,40,245,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,3,0,52,8,0,1,0,3,0,55,8,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,2,1,2,5,2,65,8,2,10,2,12,2,68,9,2,1,2,1,2,1,3,1,3,1,3,
		1,3,1,3,5,3,77,8,3,10,3,12,3,80,9,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,88,8,4,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,5,7,103,8,7,10,7,12,
		7,106,9,7,3,7,108,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,132,8,8,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,149,8,11,1,11,
		1,11,1,12,1,12,1,12,5,12,156,8,12,10,12,12,12,159,9,12,3,12,161,8,12,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,170,8,13,1,14,1,14,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,189,8,
		17,1,18,1,18,1,18,5,18,194,8,18,10,18,12,18,197,9,18,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,3,19,206,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		5,19,216,8,19,10,19,12,19,219,9,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,3,20,230,8,20,1,21,1,21,5,21,234,8,21,10,21,12,21,237,9,21,1,
		22,1,22,1,23,1,23,1,24,1,24,1,24,0,1,38,25,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,0,6,1,0,2,3,1,0,18,19,1,0,12,
		13,1,0,30,35,1,0,36,37,1,0,38,40,251,0,51,1,0,0,0,2,58,1,0,0,0,4,62,1,
		0,0,0,6,71,1,0,0,0,8,83,1,0,0,0,10,89,1,0,0,0,12,97,1,0,0,0,14,107,1,0,
		0,0,16,131,1,0,0,0,18,133,1,0,0,0,20,138,1,0,0,0,22,142,1,0,0,0,24,160,
		1,0,0,0,26,162,1,0,0,0,28,171,1,0,0,0,30,177,1,0,0,0,32,180,1,0,0,0,34,
		188,1,0,0,0,36,190,1,0,0,0,38,205,1,0,0,0,40,229,1,0,0,0,42,231,1,0,0,
		0,44,238,1,0,0,0,46,240,1,0,0,0,48,242,1,0,0,0,50,52,3,6,3,0,51,50,1,0,
		0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,55,3,10,5,0,54,53,1,0,0,0,54,55,1,0,
		0,0,55,56,1,0,0,0,56,57,3,2,1,0,57,1,1,0,0,0,58,59,3,12,6,0,59,60,5,1,
		0,0,60,61,3,4,2,0,61,3,1,0,0,0,62,66,5,23,0,0,63,65,3,16,8,0,64,63,1,0,
		0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,66,1,0,
		0,0,69,70,5,24,0,0,70,5,1,0,0,0,71,72,5,16,0,0,72,78,3,8,4,0,73,74,5,22,
		0,0,74,75,5,16,0,0,75,77,3,8,4,0,76,73,1,0,0,0,77,80,1,0,0,0,78,76,1,0,
		0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,22,0,0,82,7,1,0,
		0,0,83,84,3,12,6,0,84,87,3,42,21,0,85,86,5,21,0,0,86,88,3,38,19,0,87,85,
		1,0,0,0,87,88,1,0,0,0,88,9,1,0,0,0,89,90,5,8,0,0,90,91,3,12,6,0,91,92,
		3,42,21,0,92,93,5,25,0,0,93,94,3,14,7,0,94,95,5,26,0,0,95,96,3,4,2,0,96,
		11,1,0,0,0,97,98,7,0,0,0,98,13,1,0,0,0,99,104,3,8,4,0,100,101,5,20,0,0,
		101,103,3,8,4,0,102,100,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,
		1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,107,99,1,0,0,0,107,108,1,0,0,0,
		108,15,1,0,0,0,109,132,3,20,10,0,110,111,3,22,11,0,111,112,5,22,0,0,112,
		132,1,0,0,0,113,132,3,26,13,0,114,132,3,28,14,0,115,116,3,32,16,0,116,
		117,5,22,0,0,117,132,1,0,0,0,118,119,3,38,19,0,119,120,5,22,0,0,120,132,
		1,0,0,0,121,122,3,18,9,0,122,123,5,22,0,0,123,132,1,0,0,0,124,132,3,6,
		3,0,125,126,3,8,4,0,126,127,5,22,0,0,127,132,1,0,0,0,128,129,3,30,15,0,
		129,130,5,22,0,0,130,132,1,0,0,0,131,109,1,0,0,0,131,110,1,0,0,0,131,113,
		1,0,0,0,131,114,1,0,0,0,131,115,1,0,0,0,131,118,1,0,0,0,131,121,1,0,0,
		0,131,124,1,0,0,0,131,125,1,0,0,0,131,128,1,0,0,0,132,17,1,0,0,0,133,134,
		3,42,21,0,134,135,5,25,0,0,135,136,3,24,12,0,136,137,5,26,0,0,137,19,1,
		0,0,0,138,139,3,42,21,0,139,140,5,21,0,0,140,141,3,38,19,0,141,21,1,0,
		0,0,142,143,5,9,0,0,143,148,5,25,0,0,144,149,3,24,12,0,145,146,5,4,0,0,
		146,147,5,12,0,0,147,149,5,4,0,0,148,144,1,0,0,0,148,145,1,0,0,0,149,150,
		1,0,0,0,150,151,5,26,0,0,151,23,1,0,0,0,152,157,3,38,19,0,153,154,5,20,
		0,0,154,156,3,38,19,0,155,153,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,
		157,158,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,160,152,1,0,0,0,160,161,
		1,0,0,0,161,25,1,0,0,0,162,163,5,5,0,0,163,164,5,25,0,0,164,165,3,36,18,
		0,165,166,5,26,0,0,166,169,3,4,2,0,167,168,5,17,0,0,168,170,3,4,2,0,169,
		167,1,0,0,0,169,170,1,0,0,0,170,27,1,0,0,0,171,172,5,6,0,0,172,173,5,25,
		0,0,173,174,3,36,18,0,174,175,5,26,0,0,175,176,3,4,2,0,176,29,1,0,0,0,
		177,178,5,7,0,0,178,179,3,40,20,0,179,31,1,0,0,0,180,181,5,14,0,0,181,
		33,1,0,0,0,182,189,3,38,19,0,183,189,3,18,9,0,184,185,3,38,19,0,185,186,
		3,44,22,0,186,187,3,38,19,0,187,189,1,0,0,0,188,182,1,0,0,0,188,183,1,
		0,0,0,188,184,1,0,0,0,189,35,1,0,0,0,190,195,3,34,17,0,191,192,7,1,0,0,
		192,194,3,34,17,0,193,191,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,
		196,1,0,0,0,196,37,1,0,0,0,197,195,1,0,0,0,198,199,6,19,-1,0,199,206,3,
		40,20,0,200,201,5,34,0,0,201,202,3,12,6,0,202,203,5,32,0,0,203,204,3,38,
		19,1,204,206,1,0,0,0,205,198,1,0,0,0,205,200,1,0,0,0,206,217,1,0,0,0,207,
		208,10,3,0,0,208,209,3,46,23,0,209,210,3,38,19,4,210,216,1,0,0,0,211,212,
		10,2,0,0,212,213,3,48,24,0,213,214,3,38,19,3,214,216,1,0,0,0,215,207,1,
		0,0,0,215,211,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,
		218,39,1,0,0,0,219,217,1,0,0,0,220,230,3,42,21,0,221,230,5,11,0,0,222,
		230,5,10,0,0,223,224,5,25,0,0,224,225,3,40,20,0,225,226,5,26,0,0,226,230,
		1,0,0,0,227,230,3,20,10,0,228,230,3,18,9,0,229,220,1,0,0,0,229,221,1,0,
		0,0,229,222,1,0,0,0,229,223,1,0,0,0,229,227,1,0,0,0,229,228,1,0,0,0,230,
		41,1,0,0,0,231,235,5,12,0,0,232,234,7,2,0,0,233,232,1,0,0,0,234,237,1,
		0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,43,1,0,0,0,237,235,1,0,0,0,238,
		239,7,3,0,0,239,45,1,0,0,0,240,241,7,4,0,0,241,47,1,0,0,0,242,243,7,5,
		0,0,243,49,1,0,0,0,19,51,54,66,78,87,104,107,131,148,157,160,169,188,195,
		205,215,217,229,235
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
