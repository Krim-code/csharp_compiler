//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Redmi/Documents/Programming/C#/CourseCompiler/ArctCompiler\arct.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class arctParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, WHILE=9, 
		STRING=10, ID=11, TIMES=12, REM=13, DIV=14, PLUS=15, MINUS=16, LPAREN=17, 
		RPAREN=18, POW=19, EQ=20, EQ_EQ=21, NOT_EQ=22, LBRACE=23, RBRACE=24, END_STATE=25, 
		GT=26, LT=27, INT=28, DECIMAL=29, WS=30, COMMENT=31, LINE_COMMENT=32;
	public const int
		RULE_program = 0, RULE_function = 1, RULE_functionHead = 2, RULE_arg = 3, 
		RULE_arguments = 4, RULE_functionBody = 5, RULE_statement = 6, RULE_assignmentStatement = 7, 
		RULE_returnStatement = 8, RULE_whileStatement = 9, RULE_convert_type = 10, 
		RULE_moveValueVariable = 11, RULE_printStatement = 12, RULE_ifStatement = 13, 
		RULE_expression = 14, RULE_equation = 15, RULE_relop = 16, RULE_param = 17, 
		RULE_params = 18, RULE_functionCall = 19, RULE_atom = 20, RULE_type = 21;
	public static readonly string[] ruleNames = {
		"program", "function", "functionHead", "arg", "arguments", "functionBody", 
		"statement", "assignmentStatement", "returnStatement", "whileStatement", 
		"convert_type", "moveValueVariable", "printStatement", "ifStatement", 
		"expression", "equation", "relop", "param", "params", "functionCall", 
		"atom", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'return'", "'<<'", "'>>'", "'print'", "'if'", "'int'", "'double'", 
		"'while'", null, null, "'*'", "'%'", "'/'", "'+'", "'-'", "'('", "')'", 
		"'^'", "'='", "'=='", "'!='", "'{'", "'}'", "';'", "'>'", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "WHILE", "STRING", 
		"ID", "TIMES", "REM", "DIV", "PLUS", "MINUS", "LPAREN", "RPAREN", "POW", 
		"EQ", "EQ_EQ", "NOT_EQ", "LBRACE", "RBRACE", "END_STATE", "GT", "LT", 
		"INT", "DECIMAL", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "arct.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static arctParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public arctParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public arctParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6 || _la==T__7) {
				{
				{
				State = 44;
				function();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(arctParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(arctParser.RBRACE, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			functionHead();
			State = 51;
			Match(LBRACE);
			State = 52;
			functionBody();
			State = 53;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(arctParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(arctParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(arctParser.RPAREN, 0); }
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			type();
			State = 56;
			Match(ID);
			State = 57;
			Match(LPAREN);
			State = 58;
			arguments();
			State = 59;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(arctParser.ID, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 6, RULE_arg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			type();
			State = 62;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 8, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6 || _la==T__7) {
				{
				State = 64;
				arg();
				}
			}

			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 67;
				Match(T__0);
				State = 68;
				arg();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3044L) != 0)) {
				{
				{
				State = 74;
				statement();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveValueVariableContext moveValueVariable() {
			return GetRuleContext<MoveValueVariableContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				assignmentStatement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				returnStatement();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82;
				ifStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 83;
				whileStatement();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 5);
				{
				State = 84;
				printStatement();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 85;
				moveValueVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(arctParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(arctParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_STATE() { return GetToken(arctParser.END_STATE, 0); }
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			type();
			State = 89;
			Match(ID);
			State = 90;
			Match(EQ);
			State = 91;
			expression(0);
			State = 92;
			Match(END_STATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_STATE() { return GetToken(arctParser.END_STATE, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(T__1);
			State = 95;
			expression(0);
			State = 96;
			Match(END_STATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(arctParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(arctParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(arctParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(arctParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(arctParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(WHILE);
			State = 99;
			Match(LPAREN);
			State = 100;
			equation();
			State = 101;
			Match(RPAREN);
			State = 102;
			Match(LBRACE);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 805539820L) != 0)) {
				{
				State = 105;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 103;
					statement();
					}
					break;
				case 2:
					{
					State = 104;
					expression(0);
					}
					break;
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Convert_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(arctParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(arctParser.RPAREN, 0); }
		public Convert_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convert_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterConvert_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitConvert_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvert_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Convert_typeContext convert_type() {
		Convert_typeContext _localctx = new Convert_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_convert_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(T__2);
			State = 113;
			type();
			State = 114;
			Match(T__3);
			State = 115;
			Match(LPAREN);
			State = 116;
			expression(0);
			State = 117;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveValueVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(arctParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(arctParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_STATE() { return GetToken(arctParser.END_STATE, 0); }
		public MoveValueVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveValueVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterMoveValueVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitMoveValueVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoveValueVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoveValueVariableContext moveValueVariable() {
		MoveValueVariableContext _localctx = new MoveValueVariableContext(Context, State);
		EnterRule(_localctx, 22, RULE_moveValueVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(ID);
			State = 120;
			Match(EQ);
			State = 121;
			expression(0);
			State = 122;
			Match(END_STATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(arctParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(arctParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_STATE() { return GetToken(arctParser.END_STATE, 0); }
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(T__4);
			State = 125;
			Match(LPAREN);
			State = 126;
			expression(0);
			State = 127;
			Match(RPAREN);
			State = 128;
			Match(END_STATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(arctParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(arctParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(arctParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(arctParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(T__5);
			State = 131;
			Match(LPAREN);
			State = 132;
			equation();
			State = 133;
			Match(RPAREN);
			State = 134;
			Match(LBRACE);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3044L) != 0)) {
				{
				{
				State = 135;
				statement();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAddContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(arctParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(arctParser.MINUS, 0); }
		public ExpressionAddContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMulContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(arctParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(arctParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM() { return GetToken(arctParser.REM, 0); }
		public ExpressionMulContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionNumberContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(arctParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(arctParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(arctParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(arctParser.MINUS, i);
		}
		public ExpressionNumberContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionNestedContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(arctParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(arctParser.RPAREN, 0); }
		public ExpressionNestedContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionToTypeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Convert_typeContext convert_type() {
			return GetRuleContext<Convert_typeContext>(0);
		}
		public ExpressionToTypeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionToType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionToType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionToType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionPowContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(arctParser.POW, 0); }
		public ExpressionPowContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionPow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionPow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStringContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(arctParser.STRING, 0); }
		public ExpressionStringContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterExpressionString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitExpressionString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new ExpressionToTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 144;
				convert_type();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145;
				functionCall();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionNestedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 146;
				Match(LPAREN);
				State = 147;
				expression(0);
				State = 148;
				Match(RPAREN);
				}
				break;
			case 4:
				{
				_localctx = new ExpressionNumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS || _la==MINUS) {
					{
					{
					State = 150;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 156;
				atom();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 157;
				Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 171;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 169;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new ExpressionPowContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 160;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 161;
						((ExpressionPowContext)_localctx).op = Match(POW);
						State = 162;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionMulContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 163;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 164;
						((ExpressionMulContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) ) {
							((ExpressionMulContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 165;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionAddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 166;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 167;
						((ExpressionAddContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ExpressionAddContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 168;
						expression(5);
						}
						break;
					}
					} 
				}
				State = 173;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EquationContext : ParserRuleContext {
		public RelopContext op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterEquation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitEquation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		EquationContext _localctx = new EquationContext(Context, State);
		EnterRule(_localctx, 30, RULE_equation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			expression(0);
			State = 175;
			_localctx.op = relop();
			State = 176;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_EQ() { return GetToken(arctParser.EQ_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(arctParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(arctParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ() { return GetToken(arctParser.NOT_EQ, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 32, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 207618048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 34, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 36, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 805538824L) != 0)) {
				{
				State = 182;
				param();
				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 185;
				Match(T__0);
				State = 186;
				param();
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(arctParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(arctParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(arctParser.RPAREN, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(ID);
			State = 193;
			Match(LPAREN);
			State = 194;
			@params();
			State = 195;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(arctParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(arctParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(arctParser.ID, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 40, RULE_atom);
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				_localctx.op = Match(INT);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				_localctx.op = Match(DECIMAL);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 199;
				_localctx.op = Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IarctListener typedListener = listener as IarctListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IarctVisitor<TResult> typedVisitor = visitor as IarctVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,32,205,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,5,0,46,8,0,10,0,12,0,49,9,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
		2,1,2,1,3,1,3,1,3,1,4,3,4,66,8,4,1,4,1,4,5,4,70,8,4,10,4,12,4,73,9,4,1,
		5,5,5,76,8,5,10,5,12,5,79,9,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,87,8,6,1,7,1,
		7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,106,
		8,9,10,9,12,9,109,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
		1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
		1,13,1,13,5,13,137,8,13,10,13,12,13,140,9,13,1,13,1,13,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,5,14,152,8,14,10,14,12,14,155,9,14,1,14,1,14,
		3,14,159,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,170,8,
		14,10,14,12,14,173,9,14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,3,
		18,184,8,18,1,18,1,18,5,18,188,8,18,10,18,12,18,191,9,18,1,19,1,19,1,19,
		1,19,1,19,1,20,1,20,1,20,3,20,201,8,20,1,21,1,21,1,21,0,1,28,22,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,4,1,0,15,16,1,
		0,12,14,2,0,21,22,26,27,1,0,7,8,206,0,47,1,0,0,0,2,50,1,0,0,0,4,55,1,0,
		0,0,6,61,1,0,0,0,8,65,1,0,0,0,10,77,1,0,0,0,12,86,1,0,0,0,14,88,1,0,0,
		0,16,94,1,0,0,0,18,98,1,0,0,0,20,112,1,0,0,0,22,119,1,0,0,0,24,124,1,0,
		0,0,26,130,1,0,0,0,28,158,1,0,0,0,30,174,1,0,0,0,32,178,1,0,0,0,34,180,
		1,0,0,0,36,183,1,0,0,0,38,192,1,0,0,0,40,200,1,0,0,0,42,202,1,0,0,0,44,
		46,3,2,1,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,
		1,1,0,0,0,49,47,1,0,0,0,50,51,3,4,2,0,51,52,5,23,0,0,52,53,3,10,5,0,53,
		54,5,24,0,0,54,3,1,0,0,0,55,56,3,42,21,0,56,57,5,11,0,0,57,58,5,17,0,0,
		58,59,3,8,4,0,59,60,5,18,0,0,60,5,1,0,0,0,61,62,3,42,21,0,62,63,5,11,0,
		0,63,7,1,0,0,0,64,66,3,6,3,0,65,64,1,0,0,0,65,66,1,0,0,0,66,71,1,0,0,0,
		67,68,5,1,0,0,68,70,3,6,3,0,69,67,1,0,0,0,70,73,1,0,0,0,71,69,1,0,0,0,
		71,72,1,0,0,0,72,9,1,0,0,0,73,71,1,0,0,0,74,76,3,12,6,0,75,74,1,0,0,0,
		76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,11,1,0,0,0,79,77,1,0,0,0,
		80,87,3,14,7,0,81,87,3,16,8,0,82,87,3,26,13,0,83,87,3,18,9,0,84,87,3,24,
		12,0,85,87,3,22,11,0,86,80,1,0,0,0,86,81,1,0,0,0,86,82,1,0,0,0,86,83,1,
		0,0,0,86,84,1,0,0,0,86,85,1,0,0,0,87,13,1,0,0,0,88,89,3,42,21,0,89,90,
		5,11,0,0,90,91,5,20,0,0,91,92,3,28,14,0,92,93,5,25,0,0,93,15,1,0,0,0,94,
		95,5,2,0,0,95,96,3,28,14,0,96,97,5,25,0,0,97,17,1,0,0,0,98,99,5,9,0,0,
		99,100,5,17,0,0,100,101,3,30,15,0,101,102,5,18,0,0,102,107,5,23,0,0,103,
		106,3,12,6,0,104,106,3,28,14,0,105,103,1,0,0,0,105,104,1,0,0,0,106,109,
		1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,0,109,107,1,0,0,
		0,110,111,5,24,0,0,111,19,1,0,0,0,112,113,5,3,0,0,113,114,3,42,21,0,114,
		115,5,4,0,0,115,116,5,17,0,0,116,117,3,28,14,0,117,118,5,18,0,0,118,21,
		1,0,0,0,119,120,5,11,0,0,120,121,5,20,0,0,121,122,3,28,14,0,122,123,5,
		25,0,0,123,23,1,0,0,0,124,125,5,5,0,0,125,126,5,17,0,0,126,127,3,28,14,
		0,127,128,5,18,0,0,128,129,5,25,0,0,129,25,1,0,0,0,130,131,5,6,0,0,131,
		132,5,17,0,0,132,133,3,30,15,0,133,134,5,18,0,0,134,138,5,23,0,0,135,137,
		3,12,6,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,
		0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,5,24,0,0,142,27,1,0,0,0,143,
		144,6,14,-1,0,144,159,3,20,10,0,145,159,3,38,19,0,146,147,5,17,0,0,147,
		148,3,28,14,0,148,149,5,18,0,0,149,159,1,0,0,0,150,152,7,0,0,0,151,150,
		1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,
		0,155,153,1,0,0,0,156,159,3,40,20,0,157,159,5,10,0,0,158,143,1,0,0,0,158,
		145,1,0,0,0,158,146,1,0,0,0,158,153,1,0,0,0,158,157,1,0,0,0,159,171,1,
		0,0,0,160,161,10,6,0,0,161,162,5,19,0,0,162,170,3,28,14,7,163,164,10,5,
		0,0,164,165,7,1,0,0,165,170,3,28,14,6,166,167,10,4,0,0,167,168,7,0,0,0,
		168,170,3,28,14,5,169,160,1,0,0,0,169,163,1,0,0,0,169,166,1,0,0,0,170,
		173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,29,1,0,0,0,173,171,1,0,
		0,0,174,175,3,28,14,0,175,176,3,32,16,0,176,177,3,28,14,0,177,31,1,0,0,
		0,178,179,7,2,0,0,179,33,1,0,0,0,180,181,3,28,14,0,181,35,1,0,0,0,182,
		184,3,34,17,0,183,182,1,0,0,0,183,184,1,0,0,0,184,189,1,0,0,0,185,186,
		5,1,0,0,186,188,3,34,17,0,187,185,1,0,0,0,188,191,1,0,0,0,189,187,1,0,
		0,0,189,190,1,0,0,0,190,37,1,0,0,0,191,189,1,0,0,0,192,193,5,11,0,0,193,
		194,5,17,0,0,194,195,3,36,18,0,195,196,5,18,0,0,196,39,1,0,0,0,197,201,
		5,28,0,0,198,201,5,29,0,0,199,201,5,11,0,0,200,197,1,0,0,0,200,198,1,0,
		0,0,200,199,1,0,0,0,201,41,1,0,0,0,202,203,7,3,0,0,203,43,1,0,0,0,15,47,
		65,71,77,86,105,107,138,153,158,169,171,183,189,200
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
